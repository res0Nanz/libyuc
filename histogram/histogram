#pragma once

#include <stdexcept>
#include <valarray>

namespace yuc {
struct histogram {
public:
  using array_t = std::valarray<double>;

protected:
  array_t _v_bins;             // bin edges
  array_t _v_m0, _v_m1, _v_m2; // moments for each bin

  double _tot_w;

public:
  void refresh(void) {
    _v_m0.resize(_v_bins.size() + 1, 0.);
    _v_m1.resize(_v_bins.size() + 1, 0.);
    _v_m2.resize(_v_bins.size() + 1, 0.);
    _tot_w = 0;
  }

  void rebin(const array_t &__new_bins) {
    if (_v_bins.size()) {
      throw std::logic_error("rebinning not implemented yet");
    } else {
      _v_bins = __new_bins;
      this->refresh();
    }
  }

  void rebin(double __xmin, double __xmax, int __nbin) {
    if (__xmin > __xmax) {
      std::swap(__xmin, __xmax);
    }
    array_t newbin(0., std::abs(__nbin) + 1);
    if (__nbin < 0) { // log grid for negative __nbin
      for (size_t i = 0; i < newbin.size(); ++i) {
        double f = i / (double)-__nbin;
        newbin[i] = std::pow(__xmin, 1 - f) * std::pow(__xmax, f);
      }
    } else { // linear grid
      for (size_t i = 0; i < newbin.size(); ++i) {
        double f = i / (double)__nbin;
        newbin[i] = __xmin * (1 - f) + __xmax * f;
      }
    }
    this->rebin(newbin);
  }

  size_t locate(double x) const {
    size_t _ibin =
        std::upper_bound(begin(_v_bins), end(_v_bins), x) - begin(_v_bins);
    return _ibin < _v_bins.size() ? _ibin - 1 : -1;
  }

  void fill(size_t ibin, double weight = 1) {
    const size_t _ibin = ibin + 1;
    if (_ibin > size()) {
      throw std::logic_error("histogram filled out of range");
    }
    const double xlow = _v_bins[ibin];
    const double xhig = _v_bins[_ibin];
    _v_m0[_ibin] += weight;
    _v_m1[_ibin] += weight * (xlow + xhig) / 2.;
    _v_m2[_ibin] += weight * (xlow * xhig + xlow * xlow + xhig * xhig) / 3.;
    _tot_w += weight;
  }
  void fill(double x, double weight = 1) {
    const size_t _ibin =
        std::upper_bound(begin(_v_bins), end(_v_bins), x) - begin(_v_bins);
    _v_m0[_ibin] += weight;
    _v_m1[_ibin] += weight * x;
    _v_m2[_ibin] += weight * x * x;
    _tot_w += weight;
  }

public:
  size_t size(void) const {
    return _v_bins.size() > 0 ? _v_bins.size() - 1 : 0;
  }

  double total_weight(void) const { return _tot_w; }
  double mean(void) const { return _v_m1.sum() / _tot_w; }
  double variance(void) const {
    const double m1 = _v_m1.sum() / _tot_w;
    const double m2 = _v_m2.sum() / _tot_w;
    return m2 - m1 * m1;
  }

  double x_edges(size_t i) const { return _v_bins[i]; }
  const array_t &x_edges(void) const { return _v_bins; }

  double x_lin(size_t i) const { return (_v_bins[i] + _v_bins[i + 1]) / 2; }
  array_t x_lin(void) const {
    const auto d = size();
    return (_v_bins[std::slice(0, d, 1)] + _v_bins[std::slice(1, d, 1)]) / 2;
  }

  double x_log(size_t i) const {
    return std::sqrt(_v_bins[i] * _v_bins[i + 1]);
  }
  array_t x_log(void) const {
    const auto d = size();
    return std::sqrt(_v_bins[std::slice(0, d, 1)] *
                     _v_bins[std::slice(1, d, 1)]);
  }

  double weight(size_t i) const { return _v_m0[i + 1]; }
  array_t weight(void) const { return _v_m0[std::slice(1, size(), 1)]; }

  double probability(size_t i) const { return weight(i) / _tot_w; }
  array_t probability(void) const { return weight() / _tot_w; }

  double dx(size_t i) const { return _v_bins[i + 1] - _v_bins[i + 0]; }

  double dNdx(size_t i) const { return weight(i) / dx(i); }
  array_t dNdx(void) const {
    array_t f(size());
    for (size_t i = 0; i < f.size(); ++i) {
      f[i] = dNdx(i);
    }
    return f;
  }

  double pdf(size_t i) const { return probability(i) / dx(i); }
  array_t pdf(void) const {
    array_t f(size());
    for (size_t i = 0; i < f.size(); ++i) {
      f[i] = pdf(i);
    }
    return f;
  }

  array_t cdf(void) const { // values on edge
    array_t f = probability();
    for (size_t i = 1; i < f.size(); ++i) {
      f[i] += f[i - 1];
    }
    return f;
  }

  // double quantile(double) const;
  // double interp_pdf(double) const;
  // double interp_cdf(double) const;
};

using array_t = std::valarray<double>;

template <size_t DIM> struct multihist {
  static constexpr size_t dim = DIM;

private:
  std::string _axes[DIM];
  array_t _bin_edges[DIM];
  array_t _n;
  double _ntot;

public:
  void clear(void) {
    size_t nslot = 1;
    for (const auto &be : _bin_edges) {
      nslot *= be.size();
    }
    _n.resize(nslot, 0.);
    _ntot = 0;
  }

  void rebin(size_t iaxis, const array_t &bin_edge,
             const std::string_view &axis_name = ".") {
    if (iaxis >= DIM) {
      throw std::range_error("axis index out of range");
    }
    if (_bin_edges[iaxis].size()) {
      throw std::logic_error("rebinning not implemented yet");
    } else {
      _bin_edges[iaxis] = bin_edge;
      if (axis_name != ".") {
        _axes[iaxis] = axis_name;
      }
      clear();
    }
  }

  void rebin(const std::string_view &axis_name, const array_t &bin_edge) {
    size_t first_unbined = DIM;
    if (axis_name == ".") {
      throw std::logic_error("do not use '.' as axis_name!");
    }
    for (size_t ia = 0; ia < DIM; ++ia) {
      if (_axes[ia] == axis_name) {
        rebin(ia, bin_edge);
        return;
      }
      if (first_unbined == DIM && _bin_edges[ia].empty()) {
        first_unbined = ia;
      }
    }
    if (first_unbined == DIM) {
      throw std::logic_error("cannot found axes '" + std::string(axis_name) +
                             "'");
    }
    rebin(first_unbined, bin_edge, axis_name);
  }

  void fill(const array_t &v, double weight = 1.) {
    size_t idx = 0;
    for (size_t i = 0; i < DIM; ++i) {
      const auto &ed = _bin_edges[i];
      idx = idx * (ed.size() + 1) +
            (std::upper_bound(begin(ed), end(ed), v[i]) - begin(ed));
    }
    _n[idx] += weight, _ntot += weight;
  }

  template <typename = std::enable_if_t<(DIM > 1), void>>
  auto marginalize(size_t imarg) {
    multihist<DIM - 1> hnew;
    for (size_t i = 0; i < DIM; ++i) {
      if (i < imarg) {
        hnew._axes[i] = _axes[i];
        hnew._bin_edges[i] = _bin_edges[i];
      } else if (i > imarg) {
        hnew._axes[i - 1] = _axes[i];
        hnew._bin_edges[i - 1] = _bin_edges[i];
      }
    }
    hnew.clear();
    hnew._ntot = _ntot;

    size_t nright = 1;
    for (size_t i = imarg + 1; i < DIM; ++i) {
      nright *= _bin_edges[i].size();
    }

    const size_t nmarg = _bin_edges[imarg].size();
    for (size_t inew = 0; inew < _n.size(); ++inew) {
      const size_t istart = (inew % nright) * nmarg * nright;
      for (size_t i = 0; i < nmarg; ++i) {
        hnew._n[inew] += _n[istart + i * nright];
      }
    }
    return hnew;
  }

  template <typename = std::enable_if_t<(DIM > 1), void>>
  auto marginalize(const std::string_view &axis_name) {
    for (size_t ia = 0; ia < DIM; ++ia) {
      if (_axes[ia] == axis_name) {
        return marginalize(ia);
      }
    }
    throw std::logic_error("cannot found axes '" + std::string(axis_name) +
                           '"');
  }
};

}; // namespace yuc

// vi:ft=cpp
